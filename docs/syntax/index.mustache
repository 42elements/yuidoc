<p>YUIDoc parses a modified form of JSDoc tags, here we will list the most common tags used and how
they are parsed.</p>

<div class="intro">
```
/**
* This is the description for my class
* @class MyClass
* @constructor
*/

/**
* My method description.  Like other pieces of your comment blocks, 
* this can span multiple lines.
* @method methodName
* @param {String} foo Argument 1
* @param {Object} config A config object
* @param {String} config.name The name on the config object
* @param {Function} config.callback A callback function on the config object
* @param {Boolean} [extra=false] Do extra, optional work
* @return {Boolean} Returns true on success
*/

/**
* My property description.  Like other pieces of your comment blocks, 
* this can span multiple lines.
* @property propertyName
* @type {Object}
*/
```
</div>


<h2>Primary Tags</h2>
<p>Each comment block must have one (and only one) of the following tags</p>

<table>
<tr>
    <th>Name</th>
    <th>Example</th>
    <th>Description</th>
</tr>
<tr id="module">
    <td>`module`</td>
    <td>
```
/**
Provides the base Widget class...

@module widget
**/
```
    </td>
    <td>
        <p>Indicates that the block describes a group of related classes. 
        For example, YUI's `app` module includes classes such as `App.Base`, `Model`, and `Router`.
        You can optionally break modules up into submodules.
        
        <p>YUIDoc requires you to provide at least one module per source tree. 
        Since there isn't always an obvious place to insert module documentation in JavaScript source, 
        the convention is to declare your module at the top of the file that contains your module's "primary" or "base" class.</p>

        <p>
            See also: 
            <a href="#class">`@class`</a>,
            <a href="#for">`@for`</a>,
            <a href="#main">`@main`</a>,
            <a href="#submodule">`@submodule`</a>.
        </p>
    </td>
</tr>
<tr id="class">
    <td>`class`</td>
    <td>
```
/**
A utility that brokers HTTP requests...

@class IO 
@constructor
**/
function IO (config) { 
```
    </td>
    <td>
        <p>Indicates that the block describes a class.
        In JavaScript, this is generally an object with a constructor function. 
        The value of `@class` should be the string that identifies the functional class on its parent object. 
        For example, the `@class` for `Y.DD.Drag` would be `Drag` 
        (and its <a href="#@namespace">`@namespace`</a> would be `DD`).</p>
        
        <p>YUIDoc expects methods, properties, attributes, and events to belong to a class, 
        so in general you must provide at least one class for each module in your source tree. 
        A `@class` block should reside just above the class's constructor function,
        and above all methods, events, properties, and attributes that belong to the class.</p>

        <p>A <a href="#class">`@class`</a> tag should be paired with 
        either a `@constructor` tag or a `@static` tag.</p> 

        <p>
            See also: 
            <a href="#constructor">`@constructor`</a>,
            <a href="#extends">`@extends`</a>,
            <a href="#extensionfor">`@extensionfor`</a>,
            <a href="#for">`@for`</a>,
            <a href="#module">`@module`</a>,
            <a href="#namespace">`@namespace`</a>,
            <a href="#static">`@static`</a>,
            <a href="#uses">`@uses`</a>.
        </p>
    </td>

    </td>
</tr>
<tr id="method">
    <td>`method`</td>
    <td>
```
/**
Returns this model's attributes as...

@method toJSON
@return {Object} Copy of ...
**/
toJSON: function () { 
```
    </td>
    <td>
        <p>Indicates that the block describes a method for the current class.
        By default, the "current" class is the last class that YUIDoc parsed, but
        you can reset this with the <a href="#for">`@for`</a> tag.</p>

        <p>A `@method` block should always reside directly above the method's definition.
        At a minimum, you should also document any 
        parameters (<a href="#param">`@param`</a>) and
        return values (<a href="#return">`@return`</a>).</p>

        <p>
            See also: 
            <a href="#chainable">`@chainable`</a>,
            <a href="#class">`@class`</a>,
            <a href="#constructor">`@constructor`</a>,
            <a href="#for">`@for`</a>,
            <a href="#param">`@param`</a>,
            <a href="#return">`@return`</a>,
            <a href="#static">`@static`</a>.
        </p>
    </td>

    </td>
</tr>
<tr id="event">
    <td>`event`</td>
    <td>
```
/**
Fired when an error occurs...

@method error 
@param {String} msg A description of...
**/
var EVT_ERROR = 'error',
```
    </td>
    <td>
        <p>Indicates that the block describes a custom event that the class can fire 
        at some interesting moment of code execution. 
        An `@event` block is somewhat similar to a <a href="#param">`@method`</a> block, 
        except that <a href="#return">`@return`</a> is irrelevant, and  
        <a href="#param">`@param`</a> is used to describe properties hanging off 
        the event object that callbacks listening for the event receive. </p>

        <p>Ideally, an `@event` block should reside above the code that defines the event, 
        even if that code is just a simple string declaration.
        If you find that your `@event` block is "floating in space,"
        you should at least place it underneath the class that owns the event, 
        grouped with any other events that the class can fire.</p>
        
        <p>
            See also: 
            <a href="#bubbles">`@bubbles`</a>,
            <a href="#class">`@class`</a>,
            <a href="#for">`@for`</a>,
            <a href="#param">`@param`</a>.
        </p>
    </td>
</tr>
<tr id="property">
    <td>`property`</td>
    <td>
```
/**
Template for this view's container...

@property containerTemplate 
@type String
@default "<div/>"
**/
containerTemplate: '<div/>',
```
    </td>
    <td>
        <p>Indicates that the block describes a property belonging to the current class.</p>

        <p>As with methods, a `@property` block should always reside 
        directly above the point where the property is defined.
        At a minimum, you should also provide the property's `@type`, 
        even if the value is `"any"` or `"mixed"`.</p>

        <p>
            See also: 
            <a href="#attribute">`@attribute`</a>,
            <a href="#default">`@default`</a>,
            <a href="#class">`@class`</a>,
            <a href="#for">`@for`</a>,
            <a href="#type">`@type`</a>.
        </p>
    </td>
</tr>
<tr id="attribute">
    <td>`attribute`</td>
    <td>
```
/**
* Indicates whether this Widget
* has been rendered...
*
* @attribute rendered
* @readOnly
* @default false
* @type boolean
*/
ATTRS[RENDERED] = {
```
    </td>
    <td>
        <p>[YUI-specific] Indicates that the block describes a managed configuration attribute.  
        An attribute is an object created and managed by the YUI
        <a href="http://yuilibrary.com/yui/docs/api/classes/Attribute.html">`Attribute` API</a>.
        It is a kind of "super-property", with getters, setters, and other nifty features, 
        including the ability to automatically fire change events.</p>

        <p>An `@attribute` block should reside directly above the definition of the attribute,
        whether that is inside a `Y.Base` object's `ATTRS` property or elsewhere.
        Note that if your `yuidoc.json` file sets `attributesEmit` to `true`, 
        YUI will automatically generate documentation for the attribute's change events throughout the source tree, 
        with no extra YUIDoc comments needed from you.</p>

        <p>
            See also: 
            <a href="#property">`@property`</a>,
            <a href="#default">`@default`</a>,
            <a href="#class">`@class`</a>,
            <a href="#for">`@for`</a>,
            <a href="#type">`@type`</a>.
        </p>
    </td>
</tr>
</table>

<h2>Secondary tags</h2>
<p>
    After choosing one of the five primary tags, you can further document a module, 
    class, method, event or property with one or more of the following secondary tags.
</p>
<table>
<tr>
    <th>Name</th>
    <th>Example</th>
    <th>Description</th>
</tr>
<tr id="submodule">
    <td>`submodule`</td>
    <td>
```
/**
@module app
@submodule view
**/
```
    </td>
    <td>
        <p>Specifies that the module is actually a submodule of some parent module. 
        For example, the `app-transitions` module is a submodule of the larger `app` module.</p>

        <p>In YUI, submodules enable you to make very fine-grained choices about loading code.
        For example, the `foo` module might have a minimal `foo-core` or `foo-base` submodule
        that supplies `foo`'s basic functionality,
        plus additional `foo-*` modules that carry optional features.
        Using the YUI Loader, you can choose to load just `foo-core`, 
        `foo-core` plus a couple of extra modules, 
        or the entire `foo` "rollup".</p> 

        <p>
            See also:
            <a href="#module">`@module`</a>.
        </p>
    </td>
</tr>
<tr id="namespace">
    <td>`namespace`</td>
    <td>
```
/**
@namespace Test.Mock
**/
```
    </td>
    <td>
        <p>Specifies a class's namespace.
        The `@namespace` should <em>not</em> include the "root" or "global" object 
        that your entire library hangs off of. 
        For example, `Y.DD.Drag` has 
        a <a href="#class">`@class`</a> of `Drag`
        and a `@namespace` of `DD`, not `Y.DD`.</p> 

        <p>Supplying a `@namespace` enables you to refer to the class in YUIDoc using just the simple class name.</p>

        <p>
            See also:
            <a href="#class">`@class`</a>.
        </p>
    </td>
</tr>
<tr id="extends">
    <td>`extends`</td>
    <td>
```
/**
@class View
@constructor
@extends Base
**/
```
   </td>
   <td>
        <p>Specifies that the class inherents from a parent class. 
        YUIDoc will generate API documentation for 
        methods, properties, events, and attributes inherited from the parent class,
        and link back to the parent class's documentation.
        In the default YUIDoc theme, users can toggle whether inherited items display.</p>

        <p>
            See also:
            <a href="#class">`@class`</a>.
        </p>
   </td>
</tr>
<tr id="config">
    <td>`config`</td>
    <td>
```
/**
@config docScrollX 
@type Number 
**/
```
    </td>
    <td>
        <p>[YUI-specific] Alias for <a href="#attribute">`@attribute`</a>. 
        In older versions of YUI, `@config` was a slightly different take on attributes, 
        but the two concepts have merged.  
        Modern YUIDoc comments should use `@attribute` instead.</p>
    </td>
</tr>
<tr id="constructor">
    <td>`constructor`</td>
    <td>
```
/**
@class IO 
@constructor
**/
```
    </td>
    <td>
        <p>Indicates that the class is instantiable
        (you can use it by calling `var foo = new Foo();`).
        A <a href="#class">`@class`</a> tag should be paired with 
        either a `@constructor` tag or a `@static` tag.</p> 
        <p>
            See also:
            <a href="#class">`@class`</a>,
            <a href="#static">`@static`</a>.
        </p>
    </td>
</tr>
<tr id="static">
    <td>`static`</td>
    <td>
```
/**
YUI user agent detection...

@class UA
@static
**/


```
    </td>
    <td>
        <p>Indicates that the method or class is static:</p> 
        <ul>
            <li>For methods, indicates that the method is meant to be 
            called without instantiating the class: 
            `var node = Y.Node.create('<div/>');`</li>
            <li>For classes, indicates that you should not 
            instantiate the class with `new`. 
            You can call all of the class's methods statically.
        </ul>    
        <p>A <a href="#class">`@class`</a> tag should be paired with 
        either a `@constructor` tag or a `@static` tag.</p> 
        <p>
            See also:
            <a href="#class">`@class`</a>,
            <a href="#constructor">`@constructor`</a>,
            <a href="#method">`@method`</a>.
        </p>
    </td>
</tr>
</tr>
<tr id="final">
    <td>`final`</td>
    <td>
```
/**
Identifies state changes originating...

@property SRC_REPLACE
@type String
@static
@final
**/
```
    </td>
    <td>
        <p>Indicates that the property or attribute is a constant and should not be changed.</p>
        <p>
            See also:
            <a href="#attribute">`@attribute`</a>,
            <a href="#property">`@property`</a>,
            <a href="#readOnly">`@readOnly`</a>.
            <a href="#writeOnce">`@writeOnce`</a>.
        </p>
    </td>
</tr>
<tr id="param">
    <td>`*param`</td>
    <td>
```
/**
@param {String} name Attribute name 
   or object property path.
**/
```

```
/**
@param {Object} [options] Data to be 
    mixed into the event facade of the
    `change` event(s) for these 
    attributes.
  @param {Boolean} [options.silent=false] 
      If `true`, no `change` event will 
      be fired.
**/
```
    </td>
    <td>Defined as `@param {type} name description` or `@param name {type} description`, params can be used 
    with classes, methods and events.  Use `[name]` to indicate the param is optional, `name*` to
    indicate it is a place holder for 1..n arguments, and `[name*]` for 0..n arguments.</td>
</tr>
<tr id="return">
    <td>`return`</td>
    <td>
```
/**
@method generateClientId
@return {String} Unique clientId.
**/
```
    </td>
    <td>Defined as `@return {type} description`.</td>
</tr>
<tr id="for">
    <td>`for`</td>
    <td>
```
/**  
An inner class  
@class foo  
@for OuterClass  
**/
```
    </td>
    <td>Used to define an inner class:
After the class is done, you need to inform the parser to start working on the outer class again:

```
/**  
Another method for the outer class  
@method bar  
@for OuterClass  
**/
```
</td>
</tr>
<tr id="type">
    <td>`type`</td>
    <td>
```
/**
@type String
**/
```
```
/**
@type HTMLElement|Node|String 
**/
```
    </td>
    <td>For properties, configs and attributes. You can specify a single type, a list of legal types separated by vertical bars, or if you are lazy, "mixed".</td>
</tr>
<tr id="private">
    <td>`private`</td>
    <td>
```
/**
Reference to the internal JSONP 
instance used to make the queries.

@private
@property _jsonp
**/
```
    </td>
    <td>Privates by default are suppressed from the API docs. All methods and properties are 
    assumed to be public unless marked as private or protected.</td>
</tr>
<tr id="protected">
    <td>`protected`</td>
    <td>
```
/**
Removes the `container` from 
the DOM and ...
 
@method _destroyContainer
@protected
**/
```
    </td>
    <td>Used to designate members that should not be modified by implementers unless they are creating a subclass.</td>
</tr>
<tr id="requires">
    <td>`requires`</td>
    <td>
```
/**
@module event-simulate
@requires event
**/
```
    </td>
    <td>Used to identify dependencies in the module declaration.</td>
</tr>
<tr id="default">
    <td>`default`</td>
    <td>
```
/**
@default false
**/
```
    </td>
    <td>The default value of a property, config or attribute.</td>
</tr>
<tr id="uses">
    <td>`*uses`</td>
    <td>
```
/**
@class Panel
@constructor
@extends Widget
@uses WidgetAutohide
@uses WidgetButtons
...
**/
```
    </td>
    <td>For classes that use some kind of Object augmentation. If this object is defined and YUIDoc
    parses it, the properties from the "used" object will be displayed in the output.</td>
</tr>
<tr id="example">
    <td>`*example`</td>
    <td>
```
/**
@example
    model.set('foo', 'bar');
**/
```
    </td>
    <td>Items with this tag are automatically parsed with the Markdown and Code parser and 
    displayed below the item. <em>The code is not included raw, only in highlight form</em></td>
</tr>
<tr id="chainable">
    <td>`chainable`</td>
    <td>
```
/**
Renders this view ...

@method render
@chainable
**/
render: function () {
    return this;
},
**/
```
    </td>
    <td>Method returns itself so you can chain it with other calls on this object.</td>
</tr>
<tr id="deprecated">
    <td>`deprecated`</td>
    <td>
```
/**
@property locale
@type String
@deprecated Use `config.lang` instead.
**/
```
    </td>
    <td>Item is deprecated and will be removed in a future release.</td>
</tr>
<tr id="since">
    <td>`since`</td>
    <td>
```
/**
@since 3.4.0
**/
```
    </td>
    <td>Item was added to the source in this version.</td>
</tr>
<tr id="async">
    <td>`async`</td>
    <td>
```
/**
@async
**/
```
    </td>
    <td>Method is async and requires a callback. Uncommon.</td>
</tr>
<tr id="beta">
    <td>`beta`</td>
    <td>
```
/**
@beta
**/
```
    </td>
    <td>Item should be marked as in beta. Uncommon.</td>
</tr>
<tr id="bubbles">
    <td>`bubbles`</td>
    <td>
```
/**
Handles the mouseup DOM event...

@event drag:mouseup
@bubbles DDM
**/
```
    </td>
    <td>Event bubbles to another target</td>
</tr>
<tr id="extensionfor">
    <td>`extension`<br>`extensionfor`<br>`extension_for`</td>
    <td>
```
/**
@class PjaxBase
@extensionfor Router
**/
```
    </td>
    <td>Item is an extension of passed Item.</td>
</tr>
</table>
<em><strong>*</strong> Denotes that it supports multiple tags in the same doc block.</em>

<h3>Parsed but not in the theme yet</h3>
<p>
    The following tags are parsed by the `DocParser` but are not in the default theme yet.
</p>
<table>
<tr id="author">
    <td>`author`</td>
    <td>
```
```
    </td>
    <td>Author information about this item</td>
</tr>
<tr id="broadcast">
    <td>`broadcast`</td>
    <td>
```
```
    </td>
    <td>Event broadcasts to a large audience than scoped</td>
</tr>
<tr id="category">
    <td>`*category`</td>
    <td>
```
```
    </td>
    <td>Category to place this item into.</td>
</tr>
</table>

<h2>Extra formatting</h2>

<p>
    YUIDoc supports 3 main forms of formatting your documentation. HTML,
    <a href="http://daringfireball.net/projects/markdown/">Markdown</a> &amp; <a href="http://rgrove.github.com/selleck/">Selleck</a>.
</p>

<table>
<tr>
    <td>`HTML`</td>
    <td>Doc comments may contain standard HTML markup and YUIDoc will display it as is.</td>
</tr>
<tr>
    <td>`Markdown`</td>
    <td>Full <a href="http://daringfireball.net/projects/markdown/syntax">Markdown syntax</a>
    is also supported.
    </td>
</tr>
<tr>
    <td>`Selleck`</td>
    <td><a href="http://rgrove.github.com/selleck/">Selleck's</a> additional parsing is also supported.</td>
</tr>
</table>

<h3>Markdown and Code Highlighting</h3>

<p>
Inside any documentation block you may use Markdown or Selleck based markup. If you indent your code snippets
YUIDoc will automatically wrap them in a code block and syntax highlight them for you.
</p>

```
/**
This is the __module__ description for the `YUIDoc` module.

    var options = {
        paths: [ './lib' ],
        outdir: './out'
    };

    var Y = require('yuidoc');
    var json = (new Y.YUIDoc(options)).run();

@class YUIDoc
@main yuidoc
*/
```

<p>
This is what the above would render to:
</p>

<div class="intro">
<p>This is the <strong>module</strong> description for the <code>YUIDoc</code> module.</p>
```
    var options = {
        paths: [ './lib' ],
        outdir: './out'
    };

    var Y = require('yuidoc');
    var json = (new Y.YUIDoc(options)).run();
```
</div>

<h3>Crosslinking</h3>

<p>
    We have also added a blockHelper in Handlebars that will allow you to "cross-link" your documentation together.
</p>

<p></p>

```
/**

This module also uses \{{#crossLink Foo}}, where Foo is a class or module name.

*/
```

<p>
This will generate an internal link to the other's API document.
</p>

```
<p>
This module also uses <a href="../classes/Foo.html" class="crosslink">Foo</a>, where Foo is a class or module name.
</p>
```
